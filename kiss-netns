#!/bin/bash
# author: yin-jianhong@163.com
# version: v0.99
# dependency: iproute2 tmux
# used to create netns and add ifs into it

LANG=C
P=$0
[[ $0 = /* ]] && P=${0##*/}
AT=("$@")

Usage() {
	cat <<-EOF
	Usage:
	  $P <\$nsname,\$vethX,\$addr---\$nsname,\$vethX_peer,\$addr | \$nsname,\$macvlan_ifname,\$addr[,baseif=\$if,mode=\$mode]>
	  # ^^^^^^ nsname 'host' means default network namespace
	  $P exec \$nsname -- cmdline
	  $P del \$nsname
	  $P ls

	  $P veth ve0.a-host,ve0.b-ns0   #create veth pair
	  $P macvlan ifname              #create macvlan if

	  $P addrup \$if \$address         #set address to if
	  $P attach \$ns \$if [addr]       #attach new if to ns
	  $P detach \$ns \$if              #detach if from ns

	Options:
	  -h, --help           ; show this help info
	  -v                   ; verbose mode
	  -n <arg>             ; ns name

	Examples:
	  $P host,ve0.a-host,192.168.0.1---ns0,ve0.b-ns0,192.168.0.2  ns0,mv-ns0,192.168.100.2  host,mv-host0,192.168.100.1
	  # ^^^^^^ nsname 'host' means default network namespace
	  $P -v exec ns0 -- ping -c 4 192.168.0.1
	  curl -s -L https://raw.githubusercontent.com/tcler/linux-network-filesystems/master/tools/configure-nfs-server.sh | bash
	  $P -v exec ns0 -- showmount -e 192.168.0.1
	  $P -v exec ns0 -- mkdir -p /mnt/ns0/nfs
	  $P -v exec ns0 -- mount 192.168.0.1:/ /mnt/ns0/nfs
	  $P -v exec ns0 -- mount -t nfs4
	  $P -v exec ns0 -- ls /mnt/ns0/nfs/*
	  $P -v exec ns0 -- umount /mnt/ns0/nfs
	  $P -v exec ns0 -- rm -rf /mnt/ns0
	  $P del ns0
	  ip link delete dev mv-host0

	EOF
}

is_valid_ip() {
    local  ip=$1
    local  stat=1

    ip=${ip%/*}
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        ip=(${ip//./ })
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

ns_init_pid() {
	local ns=$1
	local initpid

	initpid=$(tmux list-panes -a -F '#{session_name} #{pane_pid}' | awk -v ns="$ns" '$1 == ns {print $2}')
	[[ -z "$initpid" ]] && return 1
	echo $initpid
}

_nsexec() {
	local initpid=$1
	shift
	nsenter --target "$initpid" --mount --uts --ipc --net --pid -- bash -c "$*"
}

nsexec() {
	local ns=$1
	shift
	local initpid=$(ns_init_pid $ns)
	[[ "$nsverbose" = yes ]] && echo "- [NETNS:$ns] # $@" | GREP_COLORS='ms=01;36' grep --color . >&2
	_nsexec "$initpid" "$@"
}

nsdelete() {
	for ns; do
		echo -e "\n{NETNS:INFO} remove ns $ns ..."

		echo -e "- {NETNS:INFO} remove ifs in ns ..."
		for dev in $(nsexec $ns ip a s | awk -F'[: @]+' '/^[0-9]+:/ {if ($2 != "lo") print $2}'); do
			nsexec $ns ip link del "$dev"
		done
		nsexec $ns ip a s

		echo -e "- {NETNS:INFO} exit init bash ..."
		tmux send-keys -t "$ns" C-z " exit; exit" Enter

		echo -e "- {NETNS:INFO} remove netns ..."
		ip netns del $ns 2>/dev/null
	done
}


attachif () {
	local ns=$1
	local if=$2
	local addr=$3

	xaddr() {
		local addr=$1
		[[ "$addr" =~ .*/[1-9]+$ ]] || addr+=/24
		echo $addr
	}

	ip link set $if netns $ns
	nsexec $ns ip link set dev $if up

	[[ -n "$addr" ]] && nsexec $ns ip addr add $(xaddr $addr) dev $if
}

detachif () {
	local ns=$1
	local if=$2
	ip netns exec $ns ip link set $if netns 1
}

addveth() {
	local fname=${FUNCNAME[0]}
	Usage() { echo -e "Usage:\n  $fname vename.x,vename.y [vename2.x,vename2.y ...]"; }

	if [[ "${#}" = 0 ]]; then
		Usage >&2
		return 1
	fi

	for pair; do
		read end0 end1 _ <<<"${pair//,/ }"
		if [[ -n "$end0" && -n "$end1" ]]; then
			ip link add $end0 type veth peer name $end1
		else
			Usage >&2
		fi
	done
}
addmacvlan() {
	local fname=${FUNCNAME[0]}
	Usage() { echo -e "Usage:\n  $fname [-if=baseif] [-mode={bridge|vepa|private|passthru}] mv1 [mv2 ...]"; }
	get_default_if() { ip route | awk '/default/{match($0,"dev ([^ ]+)",M); print M[1]; exit}'; }

	local baseif=$(get_default_if)
	local mode=bridge

	# parse options
	local mvs=()
	for arg; do
		case "$arg" in
		-if=*)   baseif=${arg/*=};;
		-mode=*) mode=${arg/*=/};;
		-*)      echo "{WARN} unkown option '${arg}'" >&2;;
		*)       mvs+=($arg);;
		esac
	done

	if [[ "${#mvs[@]}" = 0 ]]; then
		Usage >&2
		return 1
	fi

	for mv in $mvs; do
		ip link add link $baseif name ${mv} type macvlan mode $mode
	done
}
addressup() {
	local if=$1
	local addr=$2

	xaddr() {
		local addr=$1
		[[ "$addr" =~ .*/[1-9]+$ ]] || addr+=/24
		echo $addr
	}

	ip link set dev $if up
	ip addr add $(xaddr $addr) dev $if
}

# command line parse
_at=`getopt -o hvn: \
	--long help \
    -a -n "$0" -- "$@"`
eval set -- "$_at"
while true; do
	case "$1" in
	-h|--help) Usage; shift 1; exit 0;;
	-n) NS="$2"; shift 2;;
	-v) nsverbose=yes; shift 1;;
	--) shift; break;;
	esac
done

# __prepare__
which tmux &>/dev/null || dep+=\ tmux
[[ -n "$dep" ]] && {
	echo -e "{NS:INFO} install dependences ..."
	sudo yum install -y $dep >&2
}

# __main__
subcmd=$1
case $subcmd in
exec|exe|ex|e) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	nsexec $NS "$@"
	exit $?;;
del*|del|de|d) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	nsdelete $NS "$@"
	exit $?;;
ls) shift
	ip netns
	exit $?;;
veth|addveth) shift
	addveth "$@"
	exit $?;;
macvlan|addmacvlan) shift
	addmacvlan "$@"
	exit $?;;
addr|addrup|addressup) shift
	addressup "$@"
	exit $?;;
attach) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	attachif "$@"
	exit $?;;
detach) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	detachif "$@"
	exit $?;;
creat*) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	;;
esac

[[ $# = 0 ]] && {
	Usage >&2
	exit 1
}

VethList=()
MVList=()
declare -A NS_IFS
echo -e "\n{NETNS:INFO} parse parameters ..."
for topo; do
	# ns that connected to/by veth: host,veth0.x,192.168.0.1---ns0,veth0.y,192.168.0.2
	if [[ "$topo" =~ [^,]+,[^,]+,[^,]+---*[^,]+,[^,]+,[^,]+ ]]; then
		topo=$(echo "$topo"|sed 's/---*/,/')
		read nsL vethL addrL nsR vethR addrR _ <<<"${topo//,/ }"
		VethList+=($vethL,$vethR)
		NS_IFS[$nsL]+=" $vethL,$addrL"
		NS_IFS[$nsR]+=" $vethR,$addrR"
	# ns that connected to macvlan
	elif [[ "$topo" =~ [^,]+,[^,]+,[^,]+(,(baseif|mode)=.*)* ]]; then
		read ns mvname addr env <<<"${topo//,/ }"
		NS_IFS[$ns]+=" $mvname,$addr"
		MVList+=($mvname,$env)
	else
		Usage >&2
		exit 1
	fi
done

# creating all NS
for NS in "${!NS_IFS[@]}"; do
	[[ "$NS" = host ]] && continue

	echo -e "\n{NETNS:INFO} creating NS $NS ..."
	ip netns add "$NS"
	tmux new -s "$NS" -d "ip netns exec \"$NS\" /bin/bash"
done

# creating all veth ifs
for veth in "${VethList[@]}"; do
	read vethX vethY _ <<<"${veth/,/ }"
	echo -e "\n{NETNS:INFO} creating veth pair $vethX $vethY ..."
	addveth $vethX,$vethY
done

# creating all macvlan ifs
for mvinfo in "${MVList[@]}"; do
	read mvif env <<<"${mvinfo/,/ }"
	echo -e "\n{NETNS:INFO} creating macvlan $mvif ${env//,/ } ..."
	eval ${env//,/ } addmacvlan $mvif
done

# attach ifs to NS
for NS in "${!NS_IFS[@]}"; do
	for IFLIST in ${NS_IFS[$NS]}; do
		read ifname addr _ <<<"${IFLIST/,/ }"
		echo -e "\n{NETNS:INFO} attach $ifname to ns($NS) and set ip address($addr) ..."
		if [[ "$NS" = host ]]; then
			addressup $ifname $addr
		else
			attachif "$NS" $ifname $addr
		fi
	done
done
