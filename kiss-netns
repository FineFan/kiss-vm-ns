#!/bin/bash
# author: yin-jianhong@163.com
# version: v0.99
# dependency: iproute2 tmux
# used to create netns and add ifs into it

LANG=C
P=$0
[[ $0 = /* ]] && P=${0##*/}
AT=("$@")

switchroot() {
	[[ $(id -u) != 0 ]] && {
		echo -e "{NETNS:WARN} $P need root permission, switch to:\n  sudo $P ${AT[@]}" | GREP_COLORS='ms=1;30' grep --color=always . >&2
		exec sudo $P "${AT[@]}"
	}
}

Usage() {
	cat <<-EOF
	Usage:
	  $P <\$nsname,\$vethX,\$addr---\$nsname,\$vethX_peer,\$addr | \$nsname,\$vnic_name[,\$addr][?updev=\$if,mode=\$mode,iftype=\$iftype]>
	  # ^^^^^^ nsname 'host' means default network namespace, br-* means it's a bridge //[convention over configuration]

	  # +--------+                            +--------+
	  # | ns0    [veth0.X]------------[veth0.Y] host   |
	  # +--------+                            +--------+
	  # netns ns0,veth0.X,192.168.1.2---host,veth0.Y,192.168.1.1

	  # +--------+                            +--------+
	  # | ns0    [veth1.X]------------[veth1.Y] ns1    |
	  # +--------+                            +--------+
	  # netns ns0,veth1.X,192.168.2.2---ns1,veth1.Y,192.168.2.1

	  # +--------+                    +------+                    +--------+
	  # | ns0    [veth3.X]----[veth3.Y] br-0 [veth4.X]----[veth4.Y] ns1    |
	  # +--------+                    +------+                    +--------+
	  # netns ns0,veth3.X,192.168.3.2---br-0,veth3.Y  br-0,veth4.X---ns1,veth4.Y,192.168.3.1

	  # +--------+                            +--------+
	  # |        [veth5.X]------------[veth5.Y]        |
	  # | ns0    |                            | ns1    |
	  # |        [mv-ns0]              [mv-ns1]        |
	  # +--------+    \                  /    +--------+
	  #                \                /
	  #               +------------------+
	  #               | mv-ns0  | mv-ns1 |
	  #               +------------------|
	  #               |       eth0       |
	  #               +------------------+
	  # netns ns0,veth5.X,192.168.4.2---host,veth5.Y,192.168.4.1  ns0,mv-ns0,192.168.5.10  ns1,mv-ns1,192.168.5.11

	  $P exec \$nsname -- cmdline
	  $P del \$nsname
	  $P ls

	  $P veth ve0.a-host,ve0.b-ns0   #create veth pair
	  $P macvlan ifname              #create macvlan if; [updev=updev] [mode={bridge|vepa|private|passthru}]
	  $P ipvlan ifname               #create ipvlan if; [updev=updev] [mode={l2|l3}]

	  $P addrup \$if \$address         #set address and up if
	  $P addif2netns \$ns \$if [\$addr] #add new if to netns, [and setup address and up]
	  $P detach \$ns \$if              #detach if from netns

	Options:
	  -h, --help           ; show this help info
	  -v                   ; verbose mode
	  -n <arg>             ; netns name

	Examples: host connect ns0 with both veth and macvlan
	  $P host,ve0.a-host,192.168.0.1---ns0,ve0.b-ns0,192.168.0.2  host,mv-host0,192.168.100.1 ns0,mv-ns0,192.168.100.2
	  # ^^^^^^ nsname 'host' means default network namespace
	  $P -v exec ns0 -- ping -c 2 192.168.0.1
	  $P -v exec ns0 -- ping -c 2 192.168.100.1
	  #curl -s -L https://raw.githubusercontent.com/tcler/linux-network-filesystems/master/tools/configure-nfs-server.sh | sudo bash
	  sudo systemctl start nfs-server
	  sudo exportfs -o ro,no_root_squash "*:/usr/share"
	  $P -v exec ns0 -- showmount -e 192.168.0.1
	  $P -v exec ns0 -- mkdir -p /mnt/ns0/nfs
	  $P -v exec ns0 -- mount 192.168.0.1:/ /mnt/ns0/nfs
	  $P -v exec ns0 -- mount -t nfs4
	  $P -v exec ns0 -- ls /mnt/ns0/nfs/*
	  $P -v exec ns0 -- umount /mnt/ns0/nfs
	  $P -v exec ns0 -- rm -rf /mnt/ns0
	  $P del ns0
	  $P delif mv-host0

	Examples: host connect ns0 with both veth and ipvlan
	  $P host,ve0.a-host,192.168.0.1---ns0,ve0.b-ns0,192.168.0.2   host,iv-host0,192.168.99.1 ns0,iv-ns0,192.168.99.2
	  $P -v exec ns0 -- ping -c 2 192.168.99.1
	  $P del ns0
	  $P delif iv-host0

	Examples: host connect ns0 with veth and bridge br-0
	  $P host,veth0.X,192.168.66.1---br-0,veth0.Y  br-0,veth1.Y---ns0,veth1.X,192.168.66.2
	  $P -v exec ns0 -- ping -c 2 192.168.66.1
	  $P del ns0 br-0

	EOF
}

is_valid_ip() {
    local  ip=$1
    local  stat=1

    ip=${ip%/*}
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        ip=(${ip//./ })
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

netns_init_pid() {
	local ns=$1
	local initpid

	initpid=$(tmux list-panes -a -F '#{session_name} #{pane_pid}' | awk -v ns="$ns" '$1 == ns {print $2}')
	[[ -z "$initpid" ]] && return 1
	echo $initpid
}

_netnsexec() {
	local initpid=$1
	shift
	nsenter --target "$initpid" --mount --uts --ipc --net --pid -- bash -c "$*"
}

netnsexec() {
	local ns=$1
	shift
	local initpid=$(netns_init_pid $ns)
	[[ "$nsverbose" = yes ]] && echo "- [NETNS:$ns] # $@" | GREP_COLORS='ms=01;36' grep --color . >&2
	_netnsexec "$initpid" "$@"
}

netnsdelete() {
	for netns; do
		echo -e "\n{NETNS:INFO} delete/destroy netns $netns ..."

		echo -e "- {NETNS:INFO} umount all networking fs ..."
		netnsexec $netns umount -a -t nfs,nfs4,cifs

		echo -e "- {NETNS:INFO} remove ifs in netns $netns ..."
		for dev in $(netnsexec $netns ip a s | awk -F'[: @]+' '/^[0-9]+:/ {if ($2 != "lo") print $2}'); do
			netnsexec $netns ip link del "$dev"
		done
		netnsexec $netns ip a s

		echo -e "- {NETNS:INFO} exit init bash ..."
		tmux send-keys -t "$netns" C-z " exit; exit" Enter

		echo -e "- {NETNS:INFO} remove netns $netns ..."
		ip netns del $netns 2>/dev/null
	done
}
brdelete() {
	for br; do
		echo -e "\n{NETNS:INFO} delete/destroy bridge $br ..."

		echo -e "- {NETNS:INFO} remove ifs in bridge $br ..."
		for dev in $(bridge link show | awk -F'[ :@]+' "/master $br/"'{print $2}'); do
			ip link delete dev "$dev"
		done
		bridge link show | awk -F'[ :@]+' "/master $br/"'{print $2}'

		echo -e "- {NETNS:INFO} remove bridge $br ..."
		ip link delete dev $br
	done
}
nsdelete() {
	local netnsList=()
	local brList=()

	for ns; do
		case "$ns" in
		br-*) brList+=("$ns");;
		*) netnsList+=("$ns");;
		esac
	done

	netnsdelete "${netnsList[@]}"
	brdelete "${brList[@]}"
}

addif2netns() {
	local ns=$1
	local if=$2
	local addr=$3

	xaddr() {
		local addr=$1
		[[ "$addr" =~ .*/[1-9]+$ ]] || addr+=/24
		echo $addr
	}

	ip link set $if netns $ns
	netnsexec $ns ip link set dev $if up

	[[ -n "$addr" ]] && netnsexec $ns ip addr add $(xaddr $addr) dev $if
}

addif2bridge() {
	local brname=$1
	local if=$2

	ip link set dev $if master $brname
	ip link set dev $if up
}

detachif() {
	local ns=$1
	local if=$2
	ip netns exec $ns ip link set $if netns 1
}

addveth() {
	local fname=${FUNCNAME[0]}
	Usage() { echo -e "Usage:\n  $fname vename.x,vename.y [vename2.x,vename2.y ...]"; }

	if [[ "${#}" = 0 ]]; then
		Usage >&2
		return 1
	fi

	for pair; do
		read end0 end1 _ <<<"${pair//,/ }"
		if [[ -n "$end0" && -n "$end1" ]]; then
			ip link add $end0 type veth peer name $end1
		else
			Usage >&2
		fi
	done
}
addmacvlan() {
	local fname=${FUNCNAME[0]}
	Usage() { echo -e "Usage:\n  $fname [-updev=updev] [-mode={bridge|vepa|private|passthru}] mv1 [mv2 ...]"; }
	get_default_if() { ip route | awk '/default/{match($0,"dev ([^ ]+)",M); print M[1]; exit}'; }

	local updev=$(get_default_if)
	local mode=bridge

	# parse options
	local mvs=()
	for arg; do
		case "$arg" in
		updev=*|-updev=*) val=${arg#*=}; [[ -n "$val" ]] && updev="$val";;
		mode=*|-mode=*)  val=${arg#*=}; [[ -n "$val" ]] && mode="$val";;
		-*)       echo "{WARN} unkown option '${arg}'" >&2;;
		*)        mvs+=($arg);;
		esac
	done

	if [[ "${#mvs[@]}" = 0 ]]; then
		Usage >&2
		return 1
	fi

	for mv in $mvs; do
		ip link add link $updev name ${mv} type macvlan mode $mode
	done
}
addipvlan() {
	local fname=${FUNCNAME[0]}
	Usage() { echo -e "Usage:\n  $fname [-updev=updev] [-mode={l2|l3}] iv1 [iv2 ...]"; }
	get_default_if() { ip route | awk '/default/{match($0,"dev ([^ ]+)",M); print M[1]; exit}'; }

	local updev=$(get_default_if)
	local mode=l2

	# parse options
	local ivs=()
	for arg; do
		case "$arg" in
		updev=*|-updev=*) val=${arg#*=}; [[ -n "$val" ]] && updev="$val";;
		mode=*|-mode=*)  val=${arg#*=}; [[ -n "$val" ]] && mode="$val";;
		-*)       echo "{WARN} unkown option '${arg}'" >&2;;
		*)        ivs+=($arg);;
		esac
	done

	if [[ "${#ivs[@]}" = 0 ]]; then
		Usage >&2
		return 1
	fi

	for iv in $ivs; do
		ip link add link $updev name ${iv} type ipvlan mode $mode
	done
}
addbr() {
	local fname=${FUNCNAME[0]}
	Usage() { echo -e "Usage:\n  $fname br-name1 [br-name2 ...]"; }

	if [[ "${#}" = 0 ]]; then
		Usage >&2
		return 1
	fi

	for brname; do
		ip link add $brname type bridge
		ip link set dev $brname up
	done
}
addressup() {
	local if=$1
	local addr=$2

	xaddr() {
		local addr=$1
		[[ "$addr" =~ .*/[1-9]+$ ]] || addr+=/24
		echo $addr
	}

	ip link set dev $if up
	ip addr add $(xaddr $addr) dev $if
}
delif() {
	for if; do
		ip link delete dev $if
	done
}

# command line parse
_at=`getopt -o hvn: \
	--long help \
    -a -n "$0" -- "$@"`
eval set -- "$_at"
while true; do
	case "$1" in
	-h|--help) Usage; shift 1; exit 0;;
	-n) NS="$2"; shift 2;;
	-v) nsverbose=yes; shift 1;;
	--) shift; break;;
	esac
done

switchroot
# __prepare__
which tmux &>/dev/null || dep+=\ tmux
[[ -n "$dep" ]] && {
	echo -e "{NETNS:INFO} install dependences ..."
	sudo yum install -y $dep >&2
}

# __main__
subcmd=$1
case $subcmd in
exec|exe|ex|e) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	netnsexec $NS "$@"
	exit $?;;
delif) shift
	delif "$@"
	exit $?;;
del*|de|d) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	nsdelete $NS "$@"
	exit $?;;
ls) shift
	ip netns
	exit $?;;
addveth|veth) shift
	addveth "$@"
	exit $?;;
addmacvlan|macvlan) shift
	addmacvlan "$@"
	exit $?;;
addipvlan|ipvlan) shift
	addipvlan "$@"
	exit $?;;
addressup|addrup|addr) shift
	addressup "$@"
	exit $?;;
addif2netns|attach) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	addif2netns "$NS" "$@"
	exit $?;;
detach) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	[[ -z "$NS" ]] && { Usage >&2; exit 1; }
	detachif "$@"
	exit $?;;
creat*) shift
	[[ -z "$NS" ]] && { NS=$1; shift; }
	;;
esac

[[ $# = 0 ]] && {
	Usage >&2
	exit 1
}

VethList=()
VNICList=()
declare -A NS_IFS
echo -e "\n{NETNS:INFO} parse parameters ..."
for topo; do
	# ns that connected to/by veth: host,veth0.x,192.168.0.1---ns0,veth0.y,192.168.0.2
	if [[ "$topo" =~ ^[^,]+,[^,]+(,[^,]+)?---+[^,]+,[^,]+(,[^,]+)?$ ]]; then
		topo=$(echo "$topo"|sed -r 's/---+/ /')
		read nodeX nodeY _ <<<"${topo}"
		read nsX vethX addrX _ <<<"${nodeX//,/ }"
		read nsY vethY addrY _ <<<"${nodeY//,/ }"
		VethList+=($vethX,$vethY)
		NS_IFS[$nsX]+=" $vethX,$addrX"
		NS_IFS[$nsY]+=" $vethY,$addrY"
	# ns that connected to macvlan
	elif [[ "$topo" =~ ^[^,]+,[^,]+(,[0-9.]+)?(\?((updev|mode|type)=.*)(,((updev|mode|type)=.*))*)?$ ]]; then
		read ifinfo env _ <<<"${topo/\?/ }"
		read ns ifname addr _ <<<"${ifinfo//,/ }"
		NS_IFS[$ns]+=" $ifname,$addr"
		VNICList+=($ifname,${env})
	else
		echo -e "{NETNS:ERR} invalid format '\E[1;31m$topo\E[0m', see Usage:"
		Usage >&2
		exit 1
	fi
done

# creating all NetNS
for NS in "${!NS_IFS[@]}"; do
	[[ "$NS" = host ]] && continue

	if [[ "$NS" = br-* ]]; then
		echo -e "{NETNS:INFO} creating brige $NS ..."
		addbr $NS
	else
		echo -e "{NETNS:INFO} creating NS $NS ..."
		ip netns add "$NS"
		tmux new -s "$NS" -d "ip netns exec \"$NS\" /bin/bash"
	fi
done

# creating all veth ifs
for veth in "${VethList[@]}"; do
	read vethX vethY _ <<<"${veth/,/ }"
	echo -e "{NETNS:INFO} creating veth pair $vethX $vethY ..."
	addveth $vethX,$vethY
done

# creating other VNICs
for vnicinfo in "${VNICList[@]}"; do
	iftype=
	updev=
	mode=

	read vif env <<<"${vnicinfo/,/ }"
	eval ${env//,/ }

	if [[ -z "$iftype" ]]; then
		case $vif in
		mv-*) iftype=macvlan;;
		iv-*) iftype=ipvlan;;
		*) iftype=macvlan;;
		esac
	fi

	if [[ "$iftype" = macvlan ]]; then
		echo -e "{NETNS:INFO} creating macvlan $vif ${env//,/ } ..."
		addmacvlan $vif -updev=$updev -mode=$mode
	elif [[ "$iftype" = ipvlan ]]; then
		echo -e "{NETNS:INFO} creating iplan $vif ${env//,/ } ..."
		addipvlan $vif -updev=$updev -mode=$mode
	else
		:
	fi
done

# add ifs to NetNS or bridge ...
for NS in "${!NS_IFS[@]}"; do
	for IFLIST in ${NS_IFS[$NS]}; do
		read ifname addr _ <<<"${IFLIST/,/ }"
		echo -e "{NETNS:INFO} add $ifname to netns/br($NS) and/or set ip address($addr) ..."
		if [[ "$NS" = host ]]; then
			addressup $ifname $addr
		elif [[ "$NS" = br-* ]]; then
			addif2bridge "$NS" $ifname
		else
			addif2netns "$NS" $ifname $addr
		fi
	done
done
