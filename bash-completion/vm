# vm(1) completion                                         -*- shell-script -*-

. /etc/profile.d/bash_completion.sh || :
LANG=C #avoid bz1958876
IFS=$' \t\n'

prog=$(basename $BASH_SOURCE)

is_available_url() {
	local _url=$1
	curl --connect-timeout 4 -m 4 --output /dev/null -k --silent --head --fail $_url &>/dev/null
}
is_intranet() {
    local _downhostname="download.devel.fedorahat.com"
	local iurl=http://${_downhostname/fedora/red}
	is_available_url $iurl 
}

option_arg_complete() {
    local hasarg=$1
    local opt=${hasarg:-$prev}
    case $opt in
    -i|-l|-C|--xcdrom|--disk|--win-openssh|--win-download-url|--win-virtio-drv)
        [[ -n "$hasarg" ]] && return 0
        #COMPREPLY=( $( compgen -A file -- "$cur" ) )
        _filedir
        ;;
    --diskbus|--bus)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "ide sata scsi virtio" -- "$cur" ) )
        ;;
    --if-model|--win-if-model)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "e1000 rtl8139 virtio" -- "$cur" ) )
        ;;
    --video)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "auto virtio vga qxl cirrus" -- "$cur" ) )
        ;;
    --sound)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "ich6 ich9 ac97 es1370 sb16 pcspk default" -- "$cur" ) )
        ;;
    --graphics)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "vnc, spice, none" -- "$cur" ) )
        ;;
    --arch)
        [[ -n "$hasarg" ]] && return 0
        archlist=$(ls /usr/bin/qemu-system-* |& awk -F- 'NF==3{a=$3; if(a=="ppc64")a="ppc64le"; print a}')
        COMPREPLY=( $( compgen -W "$archlist" -- "$cur" ) )
        ;;
    *)
        [[ -n "$hasarg" ]] && return 1
        COMPREPLY=( $( compgen -W "${opts[*]}" -- "$cur" ) )
        ;;
    esac
}

distro_list_complete() {
    local distroList=() dlist=()
    distroList=( $(source /etc/kiss-vm-ns/distro-db.bash; printf "%s\n" ${!distroInfo[@]}) )
    if is_intranet; then
        distroList+=(RHEL-9% RHEL-8% RHEL-7% RHEL-6%)
    fi
    dlist=( "${distroList[@]}" Windows-11 Windows-10 Windows-7 Windows-server-{2012r2,2016,2019,2022} "#<aDistroFamilyName>" "#<Enter>" )
    COMPREPLY=( $( compgen -W "${dlist[*]}" -- "$cur" ) )
}

_vm()
{
    local w= cur= prev= words= cword=
    local narg=0
    local subcommandList=()
    local vmlist=
    local netparams= netlist=
    _init_completion || return

    subcommandList=(prepare enable-nested-vm help h create ls list clone port-available login console delete ifaddr viewer vncproc xml edit exec reboot stop start stat blklist netls netcreate netinfo netdel netstart cpfrom cpto rootdir homedir add.iso add.disk add.if add.if.bridge add.if.direct add.if.passthr)

    for ((i=0; i<${#words[@]}; i++)); do w=${words[$i]}; if option_arg_complete $w; then let i++; continue; elif [[ "$w" != -* ]]; then let narg++; fi; done
    local opts=( $( _parse_help "$1" ) -h )

    if [[ $narg -le 2 ]]; then
        if [[ "$cur" != -* ]]; then
            if option_arg_complete $prev; then
                 option_arg_complete
            elif [[ ${words[1]} = create ]]; then
                distro_list_complete
            elif [[ $prev = vm ]]; then
                COMPREPLY=( $( compgen -W "${subcommandList[*]}" -- "$cur" ) )
            fi
        else
            COMPREPLY=( $( compgen -W "${opts[*]}" -- "$cur" ) )
        fi
    else
        case "${words[1]}" in
        create)
            if [[ $narg -le 3 ]]; then
                if option_arg_complete $prev; then
                    option_arg_complete
                elif [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W "${opts[*]}" -- "$cur" ) )
                else
                    distro_list_complete
                fi
            else
                option_arg_complete
            fi
            ;;
        del|delete|stop|start|stat|blk*|srcfiles|homedir)
            vmlist=$(virsh list --all --name)
            COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            ;;
        reboot)
            vmlist=$(virsh list --all --name)
            COMPREPLY=( $( compgen -W "-w $vmlist" -- "$cur" ) )
            ;;
        clone)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                COMPREPLY=( $( compgen -W "#new-vm-name" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        add.iso|add.disk)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                #COMPREPLY=( $( compgen -A file -- "${cur}" ) )
                _filedir
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        add.if)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                netlist="$(virsh net-list --name --all)"
                COMPREPLY=( $( compgen -W "$netlist" -- "${cur}" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        add.if.bridge)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                brgs=$(bridge link show | awk -F'[ :]+' '{print $2}')
                COMPREPLY=( $( compgen -W "#<Enter> $brgs" -- "${cur}" ) )
            fi
            ;;
        add.if.direct)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                ifaces=$(ip route | awk '/^default/{print $5}')
                COMPREPLY=( $( compgen -W "#<Enter> $ifaces" -- "${cur}" ) )
            fi
            ;;
        add.if.passthr)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                hostifs=$(for if in /sys/class/net/*; do [[ -f $if/device/uevent ]] && echo ${if##*/} ; done)
                COMPREPLY=( $( compgen -W "#<Enter> $hostifs" -- "${cur}" ) )
            fi
            ;;
        vi|vie|view*|lo|log|log*|co|con|cons|cons*|if|ifaddr|port*)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        x|xm|xml|ed|edit)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        vn|vnc*)
            if [[ $narg -le 3 ]]; then
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W "#<Enter> --getsc --get --put --putln" -- "$cur" ) )
                else
                    vmlist=$(virsh list --name)
                    COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
                fi
            else
                COMPREPLY=( $( compgen -W "#<Enter> --getsc --get --put --putln" -- "$cur" ) )
            fi
            ;;
        cpfrom)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                COMPREPLY=( $( compgen -W "# #<file-or-dir-in-vm>" -- "$cur" ) )
            else
                #COMPREPLY=( $( compgen -A file -- "$cur" ) )
                _filedir
            fi
            ;;
        cpto)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            else
                #COMPREPLY=( $( compgen -A file -- "$cur" ) )
                _filedir
            fi
            ;;
        e|ex|exe|exec)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name --state-running)
                COMPREPLY=( $( compgen -W "-v -x $vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                COMPREPLY=( $( compgen -W "--" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "" -- "$cur" ) )
            fi
            ;;
        netc*)
            netparams="netname=fixme brname=virbr-fixme subnet=192.168.fixme.0 subnet=172.25.fixme.0 forward=no forward=nat tftproot= bootpfile= #<netname=_and_brname=_is_necessary>"
            COMPREPLY=( $( compgen -W "$netparams" -- "$cur" ) )
            ;;
        netinfo)
            netlist="$(virsh net-list --name --all)"
            COMPREPLY=( $( compgen -W "$netlist" -- "$cur" ) )
            ;;
        netdel|netstart)
            netlist="$(virsh net-list --name --all)"
            COMPREPLY=( $( compgen -W "$netlist" -- "$cur" ) )
            ;;
        prepare)
            COMPREPLY=( $( compgen -W "#<Enter> --user" -- "$cur" ) )
            if [[ "$prev" == -u || "$prev" == --user ]]; then
                users=$(awk -F: '$NF ~ /.*bash/ {print $1}' /etc/passwd)
                COMPREPLY=( $( compgen -W "$users" -- "$cur" ) )
            fi
            ;;
        ls|list|netls|enable-nested-vm|h|help|rootdir)
            COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            ;;
        *)
            COMPREPLY=( $( compgen -W "#Warning:wrong-subcommand-name" -- "$cur" ) )
            ;;
        esac
    fi
} &&
complete -F _vm $prog

#echo $prog
# ex: ts=4 sw=4 et filetype=sh
